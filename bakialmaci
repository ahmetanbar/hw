import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QVBoxLayout, QSizePolicy, QMessageBox, QWidget,QPushButton,QListWidget,QLineEdit
from PyQt5.QtGui import QIcon
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import random
import requests
from graph import *
from data import *


class App(QMainWindow):

    def __init__(self):
        super().__init__()
        self.left = 480
        self.top = 270
        self.title = 'GUI 2018'
        self.width = 960
        self.height = 540
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)


        m = PlotCanvas(self, width=5, height=4)
        m.move(350,70)

        button1 = QPushButton('BTC', self)
        button2 = QPushButton('ETH', self)
        button3 = QPushButton('USD', self)
        button4 = QPushButton('Search and Plot', self)
        liste = QListWidget(self)
        arama = QLineEdit(self)

        button1.move(170, 150)
        button1.resize(100, 50)
        button2.move(170, 250)
        button2.resize(100, 50)
        button3.move(170, 350)
        button3.resize(100, 50)
        button4.move(0, 490)
        button4.resize(100, 20)
        liste.move(0,0)
        liste.resize(100,450)
        arama.move(0,465)
        arama.resize(100,20)


        self.show()


class PlotCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)

        FigureCanvas.__init__(self, fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self,QSizePolicy.Expanding,QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)
        self.plot()

    def plot(self):
        data = [random.random() for i in range(25)]
        self.draw()





app = QApplication(sys.argv)
ex = App()
sys.exit(app.exec_())
